@page "/profile"
@rendermode InteractiveServer

@using ServiceLayer
@using BOs.Entities
@using ServiceLayer.DTO
@using System.Globalization

@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS


<PageTitle>User Profile</PageTitle>
<link href="css/Profile.css" rel="stylesheet" />
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="mb-0">My Profile</h2>
    <button class="btn btn-outline-danger btn-sm" @onclick=Logout>Logout</button>
</div>

@if (profile == null)
{
    <p>Loading profile...</p>
}
else
{
    <div class="card mb-4">
        <div class="card-header">
            <strong>Account Information</strong>
        </div>
        <EditForm method="post" Model="EditModel" OnValidSubmit="EditHandle" FormName="edit" Enhance class="form sign-in">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <input type="hidden" name="Member.Id" value="@EditModel.MemberId" />
            <div class="row mb-2">
                <label class="col-sm-3 font-weight-bold" for="email" >Email:</label>
                <InputText id="email" @bind-Value="EditModel.Email" class="col-sm-9" />
                <ValidationMessage For="() => EditModel.Email" class="text-danger" />
            </div>
            <div class="row mb-2">
                <label for="companyName" class="col-sm-3 font-weight-bold">Company Name:</label>
                <InputText id="companyName" @bind-Value="EditModel.CompanyName" class="col-sm-9" />
                <ValidationMessage For="() => EditModel.CompanyName" class="text-danger" />
            </div>

            <div class="row mb-2">
                <label for="city" class="col-sm-3 font-weight-bold">City:</label>
                <InputText id="city" @bind-Value="EditModel.City" class="col-sm-9" />
                <ValidationMessage For="() => EditModel.City" class="text-danger" />
            </div>

            <div class="row mb-2">
                <label for="country" class="col-sm-3 font-weight-bold">Country:</label>
                <InputText id="country" @bind-Value="EditModel.Country" class="col-sm-9" />
                <ValidationMessage For="() => EditModel.Country" class="text-danger" />
            </div>
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            <button type="submit" class="submit">Update</button>
        </EditForm>
    </div>

    <h3 class="mb-0">My Orders</h3>

    @foreach (var order in PagedOrders)
    {
        <div class="card mb-3 shadow-sm border-primary">
            <div class="card-header bg-primary text-white d-flex justify-content-between">
                <div>
                    <strong>Order Date:</strong> @order.OrderDate.ToString("yyyy-MM-dd")
                </div>
                <div>
                    <strong>Status:</strong> @order.Status
                </div>
            </div>

            <div class="card-body">
                <h6 class="card-title mb-3">Products</h6>
                @{
                    decimal totalAmount = 0;
                }
                @if (order.OrderDetails != null && order.OrderDetails.Any())
                {
                    <ul class="list-group mb-3">
                        @foreach (var detail in order.OrderDetails)
                        {
                            var itemTotal = detail.Quantity * detail.UnitPrice;
                            totalAmount += itemTotal;

                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@detail.Product.ProductName</strong>
                                    <br />
                                    Quantity: @detail.Quantity × @detail.UnitPrice.ToString("C", CultureInfo.GetCultureInfo("vi-VN"))
                                </div>
                                <span class="text-end fw-bold">
                                    @(itemTotal.ToString("C", CultureInfo.GetCultureInfo("vi-VN")))
                                </span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-muted">No products in this order.</p>
                }

                <div class="text-end">
                    <strong>Total:</strong>
                    <span class="fs-5 text-success fw-bold">
                        @(totalAmount.ToString("C", CultureInfo.GetCultureInfo("vi-VN")))
                    </span>
                </div>
            </div>
        </div>
    }
    <nav class="d-flex justify-content-center mt-3">
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
            </li>

            @for (int i = 1; i <= totalPages; i++)
            {
                var pageNumber = i;
                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                </li>
            }

            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>

    <h3 class="mb-0">Transaction History</h3>

@functions {
    private string GetHeaderClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "bg-secondary",
            "failed" => "bg-warning",
            "completed" => "bg-success bg-opacity-50",
            _ => "bg-light"
        };
    }
}

@foreach (var transaction in pagedTransactions)
    {
        <div class="card mb-3 shadow-sm border-secondary">
            <div class="card-header text-white d-flex justify-content-between @GetHeaderClass(transaction.Status)">
                <div>
                    <strong>Transaction Date:</strong> @transaction.TransactionDate.ToString("yyyy-MM-dd HH:mm")
                </div>
                <div>
                    <strong>Status:</strong> @transaction.Status
                </div>
            </div>

            <div class="card-body">
                <p>
                <strong>Amount:</strong> <span class="text-success">@transaction.Amount.ToString("C", CultureInfo.GetCultureInfo("vi-VN"))</span>
                </p>
                <p>
                    <strong>Payment Method:</strong> @transaction.PaymentMethod
                </p>
                <p>
                    <strong>Note:</strong> @(string.IsNullOrWhiteSpace(transaction.Note) ? "—" : transaction.Note)
                </p>
            </div>
        </div>
    }
    <nav class="d-flex justify-content-center mt-3">
    <ul class="pagination">
        <li class="page-item @(transactionPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="() => ChangeTransactionPage(transactionPage - 1)">Previous</button>
        </li>

        @for (int i = 1; i <= totalTransactionPages; i++)
        {
            var pageIndex = i; // fix closure bug
            <li class="page-item @(transactionPage == pageIndex ? "active" : "")">
                                   <button class="page-link" @onclick="() => ChangeTransactionPage(pageIndex)">@pageIndex</button>
            </li>
        }

        <li class="page-item @(transactionPage == totalTransactionPages ? "disabled" : "")">
            <button class="page-link" @onclick="() => ChangeTransactionPage(transactionPage + 1)">Next</button>
        </li>
    </ul>
</nav>
}

<script>
    function deleteCookie(name) {
        document.cookie = name + '=; Max-Age=0; path=/;';
    }
</script>

@code {
    [SupplyParameterFromForm]
    private UpdateMemberDTO EditModel { get; set; } = new();
    private Member profile;
    [Inject]
    private MemberService MemberService { get; set; }

    string errorMessage;

    // Paging Here: =(((
    private int currentPage = 1;
    private int pageSize = 3;
    private int totalPages => (int)Math.Ceiling((decimal)(profile?.Orders?.Count() ?? 0) / pageSize);

    private IEnumerable<Order> PagedOrders =>
        profile?.Orders?
            .OrderByDescending(o => o.OrderDate) // hoặc OrderID tùy bạn
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
        ?? Enumerable.Empty<Order>();

    private void ChangePage(int newPage)
    {
        if (newPage >= 1 && newPage <= totalPages)
        {
            currentPage = newPage;
        }
    }

    private int transactionPage = 1;
    private int transactionPageSize = 3;
    private int totalTransactionPages => (int)Math.Ceiling((double)profile.Transactions.Count / transactionPageSize);

    private IEnumerable<Transaction> pagedTransactions =>
            profile.Transactions
                .Skip((transactionPage - 1) * transactionPageSize)
                .Take(transactionPageSize);

     private void ChangeTransactionPage(int page)
    {
        if (page >= 1 && page <= totalTransactionPages)
        {
            transactionPage = page;
        }
    }
    //End Paging
    protected override async Task OnInitializedAsync()
    {
        if (HttpContextAccessor.HttpContext.Request.Cookies.TryGetValue("UserEmail", out var email))
        {
            profile = await MemberService.GetByEmail(email);
            EditModel.MemberId = profile.MemberId;
            EditModel.Email = profile.Email;
            EditModel.City = profile.City;
            EditModel.CompanyName = profile.CompanyName;
            EditModel.Country = profile.Country;
        }
        else
        {
            profile = null;
        }
    }

    private async Task EditHandle()
    {
        var existMember = await MemberService.GetById(EditModel.MemberId);
        var isEmailExist = false;
        if(!(existMember.Email == EditModel.Email))
        {
            isEmailExist = await MemberService.isExistByEmail(EditModel.Email);
        }

        if (!isEmailExist)
        {
            await MemberService.Update(EditModel);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            errorMessage = "Email have been existed";
        }
    }

    public async Task Logout()
    {
        await JS.InvokeVoidAsync("deleteCookie", "UserEmail");
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}
