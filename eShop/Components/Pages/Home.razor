@page "/"
@using ServiceLayer

@using BOs.Entities

@inject IHttpContextAccessor HttpContextAccessor


@using ServiceLayer.DTO
@inject ProductService ProductService
@inject OrderService OrderService
@using eShop
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>

<link href="css/home.css" rel="stylesheet" />

@if(userEmail == null)
{
    <NavLink href="login"
             style="
        text-decoration: none;
        position: absolute;
        top: 10px;
        right: 80px;
        z-index: 999;
    ">
        <button style="
                padding: 4px 24px;
                font-size: 18px;
                background-color: white;
                color: #4facfe;
                border: none;
                border-radius: 6px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            "
                onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 6px 16px rgba(0,0,0,0.25)';"
                onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';">
            Login
        </button>
    </NavLink>
    <NavLink href="register"
             style="
        text-decoration: none;
        position: absolute;
        top: 10px;
        right: 200px;
        z-index: 999;
    ">
        <button style="
                padding: 4px 24px;
                font-size: 18px;
                background-color: white;
                color: darkorange;
                border: none;
                border-radius: 6px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            "
                onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 6px 16px rgba(0,0,0,0.25)';"
                onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';">
            Register
        </button>
    </NavLink>
}
else
{
    <NavLink href="profile"
             style="
            text-decoration: none;
            position: absolute;
            top: 10px;
            right: 200px;
            z-index: 999;
        ">
        <button style="
                    padding: 4px 24px;
                    font-size: 18px;
                    background-color: white;
                    color: darkorange;
                    border: none;
                    border-radius: 6px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                "
                onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 6px 16px rgba(0,0,0,0.25)';"
                onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';">
            Profile
        </button>
    </NavLink>
}
  

<div class="home-container">
    <h1 class="title">EStore Products</h1>

    <div class="search-bar">
        <input class="search-input"
               placeholder="Search by product name"
               value="@SearchTerm"
               @oninput="OnSearchInputChanged"
               @onkeydown="HandleKeyPress" />

        <select class="category-select" @onchange="OnCategoryChanged">
            <option value="">All Categories</option>
            @if (Categories != null)
            {
                @foreach (var category in Categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            }
            else
            {
                <option disabled>Loading categories...</option>
            }
        </select>
    </div>

    @if (Products == null)
    {
        <p class="status-message">Loading...</p>
    }
    else if (!Products.Any())
    {
        <p class="status-message">No products found.</p>
    }
    else
    {
        <div class="product-list">
            @foreach (var product in Products)
            {
                <div class="product-card">
                    <h4>@product.ProductName</h4>
                    <p>💰 Price: <span style="color: green"><strong>@product.UnitPrice.ToString("C")</strong></span></p>
                    <p>🏷️ Category: @product.CategoryName</p>
                    <button @onclick="() => AddToCart(product)" class="add-button">Add to Cart</button>
                </div>
            }
        </div>
    }
</div>

@if (TotalPages > 1)
{
    <nav aria-label="Page navigation" class="mt-4 text-center">
        <ul class="pagination justify-content-center">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PrevPage">Previous</button>
            </li>
            @for (int i = 1; i <= TotalPages; i++)
            {
                var pageNumber = i;
                <li class="page-item @(pageNumber == CurrentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }
            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}

<!--them thong bao thanh cong-->
@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="success-message">
        @SuccessMessage
    </div>
}

@code {
    private List<ProductDTO> Products { get; set; } = new();
    private List<CategoryDTO> Categories { get; set; } = new();
    private string SearchTerm { get; set; }
    private int? SelectedCategoryId { get; set; }
    private DateTime _lastSearchTime = DateTime.MinValue;
    private string ErrorMessage;
    private string SuccessMessage { get; set; }
    private int PageSize = 9;
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private bool IsLoggedIn => !string.IsNullOrEmpty(HttpContextAccessor.HttpContext?.Request.Cookies["MemberId"]);
    private string userEmail;
    private Member member;

    [Inject]
    private MemberService MemberService { get; set; }
    protected override void OnInitialized()
    {
        // Lấy cookie "UserEmail" nếu có
        if (HttpContextAccessor.HttpContext.Request.Cookies.TryGetValue("UserEmail", out var email))
        {
            userEmail = email;
        }
        else
        {
            userEmail = null; // hoặc default value
        }
    }  
    
    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        Categories = await ProductService.GetCategoriesAsync();
    }

    private async Task LoadProducts()
    {
        try
        {
            var response = await ProductService.GetPagedProductsAsync(SearchTerm, SelectedCategoryId, CurrentPage, PageSize);
            Products = response.Products;
            TotalPages = response.TotalPages;
            CurrentPage = response.PageIndex;
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred while loading products.";
            Console.WriteLine($"[Paging] ❌ Exception: {ex}");
        }
    }

    private async Task SearchProducts()
    {
        CurrentPage = 1;
        await LoadProducts();
    }

    private async Task OnSearchInputChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString();
        Console.WriteLine($"[Input] Changed to: {SearchTerm}");
        await SearchProducts();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProducts();
        }
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        Console.WriteLine($"[Category] Changed to: {e.Value}");
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            SelectedCategoryId = selectedId;
        }
        else
        {
            SelectedCategoryId = null;
        }

        await SearchProducts();
    }

    private async Task AddToCart(ProductDTO product)
    {
        if (!IsLoggedIn)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            var memberId = GetCurrentMemberId();
            await OrderService.AddToCartAsync(memberId, product.ProductId, product.UnitPrice);
            SuccessMessage = "Product added to cart successfully!";
            StateHasChanged();

            // Tự động ẩn thông báo sau 2 giây
            await Task.Delay(2000);
            SuccessMessage = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[AddToCart] ❌ Exception: {ex}");
        }
    }

    private int GetCurrentMemberId()
    {
        var memberIdCookie = HttpContextAccessor.HttpContext?.Request.Cookies["MemberId"];
        return int.TryParse(memberIdCookie, out int memberId) ? memberId : 0;
    }

    private async Task PrevPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadProducts();
        }
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadProducts();
        }
    }

    private async Task GoToPage(int page)
    {
        CurrentPage = page;
        await LoadProducts();
    }
}